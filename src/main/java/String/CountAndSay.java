package String;

public class CountAndSay {

/*    Find the n’th term in Look-and-say (Or Count and Say) Sequence.
    The look-and-say sequence is the sequence of below integers
        1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …

    How is above sequence generated?
    n’th term in generated by reading (n-1)’th term*/
/*The first term is "1"

    Second term is "11", generated by reading first term as "One 1"
            (There is one 1 in previous term)

    Third term is "21", generated by reading second term as "Two 1"

    Fourth term is "1211", generated by reading third term as "One 2 One 1"

    and so on*/
/*    Input: n = 3
    Output: 21

    Input: n = 5
    Output: 111221*/

    public static void main(String[] args)
    {
        int N = 5;
        System.out.println(countnndSay(N));
    }

    private static String countnndSay(int n) {

        if(n==1) return "1";
        if(n==2) return "11";
        // Find n'th term by generating all terms from 3 to n-1.
        // Every term is generated using previous term

        // Initialize previous term
        String str = "11";

        for(int i =3; i <=n; i++){

            // In below for loop, previous character is processed in
            // current iteration. That is why a dummy character is
            // added to make sure that loop runs one extra iteration.
            str += '$';

            int len = str.length();

            int count = 1; // Initialize count of matching chars
            String tmp = ""; // Initialize i'th term in series

            for(int j =1; j <len;j++){

                if(str.charAt(j) != str.charAt(j-1)){

                    tmp = tmp + count +str.charAt(j-1);

                    //reset count everytime when not matched
                    count =1;

                }
                // If matches, then increment count of matching characters
                else{
                    count++;
                }
            }
            str = tmp;
        }

        return str;
    }
}
